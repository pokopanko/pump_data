class HexLine:
    def __init__(self, raw_line):
        self.raw_line = raw_line
        self.byte_count = None
        self.address = None
        self.record_type = None
        self.data = None
        self.checksum = None
        self.parse()

    def parse(self):
        """HEXの1行を解析"""
        if not self.raw_line.startswith(":"):
            return
        self.byte_count = int(self.raw_line[1:3], 16)
        self.address = int(self.raw_line[3:7], 16)
        self.record_type = int(self.raw_line[7:9], 16)
        self.data = self.raw_line[9:-2]
        self.checksum = int(self.raw_line[-2:], 16)

    def calculate_checksum(self):
        """チェックサムを計算する"""
        byte_values = [
            self.byte_count,
            (self.address >> 8) & 0xFF,
            self.address & 0xFF,
            self.record_type
        ]
        byte_values += [int(self.data[i:i+2], 16) for i in range(0, len(self.data), 2)]
        checksum = (-(sum(byte_values) & 0xFF)) & 0xFF
        return checksum

    def is_valid(self):
        """チェックサムが正しいか確認"""
        return self.calculate_checksum() == self.checksum

    def fix_checksum(self):
        """チェックサムを修正"""
        self.checksum = self.calculate_checksum()
        self.raw_line = f":{self.byte_count:02X}{self.address:04X}{self.record_type:02X}{self.data}{self.checksum:02X}"

class HexFile:
    def __init__(self, file_path):
        self.file_path = file_path
        self.lines = []  # HexLine のリスト
    
    def load(self):
        """HEXファイルを読み込む"""
        with open(self.file_path, "r") as f:
            for line in f:
                self.lines.append(HexLine(line.strip()))

    def validate_checksums(self):
        """全行のチェックサムを検証"""
        return all(line.is_valid() for line in self.lines)

    def fix_checksums(self):
        """全行のチェックサムを修正"""
        for line in self.lines:
            line.fix_checksum()
    
    def save(self, output_path):
        """HEXファイルを保存"""
        with open(output_path, "w") as f:
            for line in self.lines:
                f.write(line.raw_line + "\n")

class DboLine:
    def __init__(self, raw_line):
        self.raw_line = raw_line
        self.label = None
        self.address = None
        self.parse()

    def parse(self):
        """DBOの1行を解析"""
        parts = self.raw_line.split("?")
        if len(parts) >= 2:
            self.label = parts[0]
            self.address = int(parts[1], 16)

    def to_string(self):
        """元のフォーマットで出力"""
        return f"{self.label}?{hex(self.address)}"

class DboFile:
    def __init__(self, file_path):
        self.file_path = file_path
        self.lines = []  # DboLine のリスト
    
    def load(self):
        """DBOファイルを読み込む"""
        with open(self.file_path, "r") as f:
            for line in f:
                self.lines.append(DboLine(line.strip()))

class PumpUpTool:
    def __init__(self, old_hex, new_hex, old_dbo, new_dbo):
        self.old_hex = HexFile(old_hex)
        self.new_hex = HexFile(new_hex)
        self.old_dbo = DboFile(old_dbo)
        self.new_dbo = DboFile(new_dbo)

    def execute(self, output_file):
        """ポンプアップを実行"""
        self.old_hex.load()
        self.new_hex.load()
        self.old_dbo.load()
        self.new_dbo.load()

        # 旧DBOのラベルとアドレスの対応表を作成
        old_address_map = {line.label: line.address for line in self.old_dbo.lines}
        new_address_map = {line.label: line.address for line in self.new_dbo.lines}

        # 旧HEXのデータを新HEXに反映
        for label, old_address in old_address_map.items():
            if label in new_address_map:
                new_address = new_address_map[label]
                for hex_line in self.new_hex.lines:
                    if hex_line.address == new_address:
                        for old_line in self.old_hex.lines:
                            if old_line.address == old_address:
                                hex_line.data = old_line.data  # データを移植
                                hex_line.fix_checksum()

        self.new_hex.save(output_file)
